<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>BT on Fan的博客</title>
    <link>https://hugodoit.pages.dev/categories/bt/</link>
    <description>Recent content in BT on Fan的博客</description>
    <generator>Hugo</generator>
    <language>zh-CN</language>
    <managingEditor>fan097@outlook.com (Fan)</managingEditor>
    <webMaster>fan097@outlook.com (Fan)</webMaster>
    <lastBuildDate>Mon, 23 Jun 2025 16:37:59 +0800</lastBuildDate>
    <atom:link href="https://hugodoit.pages.dev/categories/bt/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>KRPC请求格式</title>
      <link>https://hugodoit.pages.dev/krpc%E8%AF%B7%E6%B1%82%E6%A0%BC%E5%BC%8F/</link>
      <pubDate>Sun, 20 Apr 2025 11:12:20 +0800</pubDate><author>fan097@outlook.com (Fan)</author>
      <guid>https://hugodoit.pages.dev/krpc%E8%AF%B7%E6%B1%82%E6%A0%BC%E5%BC%8F/</guid>
      <description>&lt;p&gt;所有的 KRPC 消息都是通过 UDP 传输的、经过 Bencode 编码的字典。&#xA;本文主要介绍&lt;code&gt;find_node&lt;/code&gt;、 &lt;code&gt;get_peers&lt;/code&gt; 和 &lt;code&gt;announce_peer&lt;/code&gt; 这三个 RPC 调用的请求和响应消息结构。&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;通用结构元素:&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;&lt;code&gt;t&lt;/code&gt;&lt;/strong&gt;: 事务 ID (Transaction ID)，二进制字符串，由请求方设置，响应方必须在响应中原样返回。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;&lt;code&gt;y&lt;/code&gt;&lt;/strong&gt;: 消息类型 (Message Type)，单个字符，&amp;lsquo;q&amp;rsquo; 代表查询 (Query)，&amp;lsquo;r&amp;rsquo; 代表响应 (Response)，&amp;rsquo;e&amp;rsquo; 代表错误 (Error)。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;&lt;code&gt;v&lt;/code&gt;&lt;/strong&gt; (可选): 客户端版本信息 (Version)，通常是字符串。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;&lt;code&gt;ip&lt;/code&gt;&lt;/strong&gt; (可选，通常在响应中出现): 响应者看到的请求者的公网 IP 地址和端口 (紧凑的 6 字节二进制字符串)。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;hr&gt;&#xA;&lt;h3 id=&#34;1find_node-rpc&#34; class=&#34;headerLink&#34;&gt;&#xA;    &lt;a href=&#34;#1find_node-rpc&#34; class=&#34;header-mark&#34;&gt;&lt;/a&gt;0.1 1、&lt;code&gt;find_node&lt;/code&gt; RPC&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;目的:&lt;/strong&gt; 向一个节点请求，获取它所知道的、其 Node ID 在 XOR 距离上最接近指定 &lt;code&gt;target&lt;/code&gt; Node ID 的 &lt;code&gt;k&lt;/code&gt; 个节点的联系信息。这主要用于路由表的填充和更新，以及在其他查找（如 &lt;code&gt;get_peers&lt;/code&gt;）中进行迭代查询。&#xA;&lt;code&gt;find_node&lt;/code&gt; 请求用于询问某个节点：“请告诉我你认识的、离 &lt;code&gt;target&lt;/code&gt; 这个 Node ID 最近的那些节点是谁？”。响应则直接返回一个包含这些节点（最多 k 个）联系信息的紧凑字符串。这个 RPC 是 DHT 网络进行节点发现和路由的基础。&lt;/p&gt;</description>
    </item>
    <item>
      <title>KRPC</title>
      <link>https://hugodoit.pages.dev/kprc/</link>
      <pubDate>Sun, 20 Apr 2025 09:19:18 +0800</pubDate><author>fan097@outlook.com (Fan)</author>
      <guid>https://hugodoit.pages.dev/kprc/</guid>
      <description>&lt;p&gt;好的，我们来详细介绍一下 KRPC 协议。这是 BitTorrent Mainline DHT 网络中节点之间进行通信所使用的协议。&#xA;KRPC 是 BitTorrent DHT 的基石通信协议。它利用 UDP 的高效性和 Bencode 的简洁性，定义了一套清晰的查询/响应机制（&lt;code&gt;ping&lt;/code&gt;, &lt;code&gt;find_node&lt;/code&gt;, &lt;code&gt;get_peers&lt;/code&gt;, &lt;code&gt;announce_peer&lt;/code&gt;）以及错误处理方式&lt;/p&gt;</description>
    </item>
    <item>
      <title>Kademlia 算法（二）</title>
      <link>https://hugodoit.pages.dev/kademlia-%E7%AE%97%E6%B3%95-2/</link>
      <pubDate>Fri, 18 Apr 2025 23:18:08 +0800</pubDate><author>fan097@outlook.com (Fan)</author>
      <guid>https://hugodoit.pages.dev/kademlia-%E7%AE%97%E6%B3%95-2/</guid>
      <description>&lt;h2 id=&#34;算法流程&#34; class=&#34;headerLink&#34;&gt;&#xA;    &lt;a href=&#34;#%e7%ae%97%e6%b3%95%e6%b5%81%e7%a8%8b&#34; class=&#34;header-mark&#34;&gt;&lt;/a&gt;1 算法流程&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;1. 节点 ID (Node ID)&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;结构&lt;/strong&gt;：通常是一个 160 位或 256 位的随机数。这个长度决定了网络的理论最大规模以及发生 ID 碰撞（两个节点生成相同 ID）的概率（极低）。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;生成&lt;/strong&gt;：节点第一次启动时，通常会随机生成自己的 Node ID。这个 ID 在节点的生命周期内保持不变。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;意义&lt;/strong&gt;：ID 不仅仅是标识符，它定义了节点在 Kademlia “地址空间”中的位置。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;&lt;strong&gt;2. XOR 距离度量 (XOR Metric)&lt;/strong&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>Kademlia 算法（一）</title>
      <link>https://hugodoit.pages.dev/kademlia-%E7%AE%97%E6%B3%95-1/</link>
      <pubDate>Fri, 18 Apr 2025 23:18:08 +0800</pubDate><author>fan097@outlook.com (Fan)</author>
      <guid>https://hugodoit.pages.dev/kademlia-%E7%AE%97%E6%B3%95-1/</guid>
      <description>&lt;p&gt;Kademlia 是一种通过分布式哈希表（DHT）实现的协议算法，专为非集中式对等网络（P2P）而设计。它由 Petar Maymounkov 和 David Mazières 于 2002 年提出。Kademlia 协议包含了对应网络的结构，规定了节点之间通过查询进行信息交换的方式。很多著名的点对点（P2P）系统，比如 BitTorrent 的 DHT 网络、以太坊（Ethereum）等，都使用了 Kademlia 或其变种算法。&lt;/p&gt;</description>
    </item>
    <item>
      <title>BitTorrent  的 DHT协议</title>
      <link>https://hugodoit.pages.dev/bittorrent-%E7%9A%84-dht%E5%8D%8F%E8%AE%AE/</link>
      <pubDate>Fri, 18 Apr 2025 23:18:00 +0800</pubDate><author>fan097@outlook.com (Fan)</author>
      <guid>https://hugodoit.pages.dev/bittorrent-%E7%9A%84-dht%E5%8D%8F%E8%AE%AE/</guid>
      <description>&lt;p&gt;本文介绍 BitTorrent 使用的 DHT（分布式哈希表）网络，它通常被称为 &amp;ldquo;Mainline DHT&amp;rdquo;。&lt;/p&gt;&#xA;&lt;h3 id=&#34;背景与目的&#34; class=&#34;headerLink&#34;&gt;&#xA;    &lt;a href=&#34;#%e8%83%8c%e6%99%af%e4%b8%8e%e7%9b%ae%e7%9a%84&#34; class=&#34;header-mark&#34;&gt;&lt;/a&gt;0.1 &lt;strong&gt;背景与目的&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;最初，BitTorrent 依赖于 &lt;strong&gt;Tracker 服务器&lt;/strong&gt; 来协调 Peer（下载或上传同一个文件的用户）之间的连接。用户客户端连接到 Tracker，报告自己的信息和想要的 Torrent 文件，Tracker 则返回其他正在下载/上传该文件的 Peer 的列表。这种方式的问题在于 Tracker 是一个&lt;strong&gt;中心点&lt;/strong&gt;：&lt;/p&gt;</description>
    </item>
    <item>
      <title>BT握手与TCP的连接与释放</title>
      <link>https://hugodoit.pages.dev/bt%E6%8F%A1%E6%89%8B%E4%B8%8Etcp%E7%9A%84%E8%BF%9E%E6%8E%A5%E4%B8%8E%E9%87%8A%E6%94%BE/</link>
      <pubDate>Fri, 18 Apr 2025 23:18:00 +0800</pubDate><author>fan097@outlook.com (Fan)</author>
      <guid>https://hugodoit.pages.dev/bt%E6%8F%A1%E6%89%8B%E4%B8%8Etcp%E7%9A%84%E8%BF%9E%E6%8E%A5%E4%B8%8E%E9%87%8A%E6%94%BE/</guid>
      <description>&lt;p&gt;定位了DHT爬虫的一个问题，在这梳理一下BT握手流程&lt;/p&gt;&#xA;&lt;p&gt;BitTorrent 客户端（假设为 A）与另一个 Peer（假设为 B）从建立 TCP 连接开始，经过标准握手、扩展握手，最终到通过 &lt;code&gt;ut_metadata&lt;/code&gt; 扩展获取种子元数据的完整流程&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
